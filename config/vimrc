"      .-.     .-.     .-.     .-.     .-.     .-.     .-.
" `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'
"
" https://github.com/rafi/vim-config

" Runtime and Plugins
" -------------------------------------------------

if &compatible
	set nocompatible
endif

" Respect XDG
if ! empty($XDG_CONFIG_HOME) && isdirectory($XDG_CONFIG_HOME.'/vim')
	let $VIMPATH=expand('$XDG_CONFIG_HOME/vim')
	let $VARPATH=expand('$XDG_CACHE_HOME/vim')
else
	let $VIMPATH=expand('$HOME/.vim')
	let $VARPATH=expand('$HOME/.cache/vim')
endif

function! s:dein_load_yaml(filename) abort
	if executable('yaml2json')
		" Decode YAML using the CLI tool yaml2json
		" See: https://github.com/koraa/large-yaml2json-json2yaml
		let l:plugins = json_decode(system('yaml2json', readfile(a:filename)))
	else
		" Fallback to use python and PyYAML
	python << endpython
import vim
import yaml
filename = vim.eval('a:filename')
with open(filename, 'r') as f:
	response = yaml.load(f.read())
vim.command('let l:plugins = {}'.format(response))
endpython
	endif

	for plugin in l:plugins
		call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
	endfor
endfunction

function! s:source_file(path) abort
	execute 'source' fnameescape($VIMPATH.'/config/'.a:path)
endfunction

function! s:lazy_load_filetype() abort
	if &l:filetype ==# '' && bufname('%') ==# ''
		return
	endif
	redir => filetype_out
	silent! filetype
	redir END
	if filetype_out =~# 'OFF'
		silent! filetype plugin indent on
		syntax enable
		filetype detect
		" For some reason this event isn't being
		" triggered, and theme doesn't load
		doautoall ColorScheme
	endif
endfunction

" Set augroup
augroup MyAutoCmd
	autocmd!
	" Lazy-loading filetype syntax and highlighting
	autocmd MyAutoCmd FileType,Syntax,BufNewFile,BufNew,BufRead
		\ * call s:lazy_load_filetype()
augroup END

" Initialize base requirements
if has('vim_starting')
	call s:source_file('init.vim')
	if has('nvim')
		call s:source_file('neovim.vim')
	endif
endif

" Initialize dein.vim (package manager)
let s:path = expand('$VARPATH/dein')
if dein#load_state(s:path)
	call dein#begin(s:path, [expand('<sfile>'), expand('$VIMPATH/plugins.yaml')])
	try
		call s:dein_load_yaml(expand('$VIMPATH/plugins.yaml'))
	catch /.*/
		echomsg 'Error loading plugins.yaml...'
		echomsg 'Caught: ' v:exception
		echoerr 'Please run: pip install --user PyYAML'
	endtry

	if isdirectory(expand('$VIMPATH/dev'))
		call dein#local(expand('$VIMPATH/dev'), {'frozen': 1, 'merged': 0})
	endif
	call dein#local(dein#get('awesome-vim-colorschemes').path)
	call dein#end()
	call dein#save_state()
	if dein#check_install()
		if ! has('nvim')
			set nomore
		endif
		call dein#install()
		" After initial installation, the colorschemes are not registered.
		" Bug in dein.vim?
		if &runtimepath !~# '/awesome-vim-colorschemes'
			let s:theme = dein#get('awesome-vim-colorschemes').path.'/hybrid'
			execute 'set runtimepath+='.
				\ substitute(fnamemodify(s:theme, ':p') , '/$', '', '')
		endif
	endif
endif

call s:source_file('plugins/all.vim')

if ! has('vim_starting')
	call dein#call_hook('source')
	call dein#call_hook('post_source')

	filetype plugin indent on
	syntax enable
endif

" Loading configuration modules {{{
call s:source_file('general.vim')
call s:source_file('theme.vim')
call s:source_file('filetype.vim')
call s:lazy_load_filetype()
call s:source_file('terminal.vim')
call s:source_file('utils.vim')
call s:source_file('bindings.vim')
" }}}

set secure
" vim: set ts=2 sw=2 tw=80 noet :
